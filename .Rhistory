library("magrittr")
dexp(5, 1.5) %>% log
dexp(5, 1.5, log = T)
neuron <- read.table("http://math.ku.dk/~tfb525/teaching/statbe/neuronspikes.txt",
col.names = "time")
# Expressions we want to minimize
mllk.gamma <- function(params, data) {
-(dgamma(data, shape = params[1], rate = params[2], log = T) %>% sum)
}
mllk.exponential <- function(rate, data) {
-(dexp(data, rate, log = T) %>% sum)
}
# Optimize
exp.optim <- optimize(mllk.exponential, interval = c(-10, 10), data = neuron$time)
exp.optim <- exp.optim$minimum
gamma.optim <- optim(c(1, 1), mllk.gamma, data = neuron$time)
gamma.optim
exp.optim
exp.optim <- optimize(mllk.exponential, interval = c(-10, 10), data = neuron$time)
exp.optim
exp.optim <- exp.optim$minimum
gamma.optim <- optim(c(1, 1), mllk.gamma, data = neuron$time)
MLL1 <- mllk.exponential(exp.optim, neuron$time)
MLL2 <- mllk.gamma(gamma.optim$par, neuron$time)
MLL1
MLL2
MLL2 <- optim(c(1, 1), mllk.gamma, data = neuron$time)$minimum
statistic <- 2 * (MLL1 - MLL2)
p.value <- 1 - pchisq(statistic, df = 1)
p.value
statistic <- 2 * (MLL1 - MLL2)
statistic
MLL1 <- optimize(mllk.exponential, interval = c(-10, 10), data = neuron$time)$minimum
MLL2 <- optim(c(1, 1), mllk.gamma, data = neuron$time)$minimum
statistic <- 2 * (MLL1 - MLL2)
p.value <- 1 - pchisq(statistic, df = 1)
p.value
MLL1
MLL2
MLL2 <- optim(c(1, 1), mllk.gamma, data = neuron$time)
MLL2
MLL2 <- optim(c(1, 1), mllk.gamma, data = neuron$time)$value
statistic <- 2 * (MLL1 - MLL2)
p.value <- 1 - pchisq(statistic, df = 1)
p.value
MLL2
MLL1
optimize(mllk.exponential, interval = c(-10, 10), data = neuron$time)
MLL1 <- optimize(mllk.exponential, interval = c(-10, 10), data = neuron$time)$objective
MLL2 <- optim(c(1, 1), mllk.gamma, data = neuron$time)$value
statistic <- 2 * (MLL1 - MLL2)
p.value <- 1 - pchisq(statistic, df = 1)
p.value
runApp('MEGA/Master/STATS/week4/exercises/ex4_5')
x.params <- optim(c(1, 1), mllk.normal, data = x)
y.params <- optim(c(1, 1), mllk.normal, data = y)
mllk.normal <- function(params, data) {
#-(sum(log(dnorm(data, mean = params, sd = 4))))
-(data %>% dnorm(mean = params[1], sd = params[2]) %>% log %>% sum)
}
mllk.normal <- function(params, data) {
-(data %>% dnorm(mean = params[1], sd = params[2], log = T) %>% sum)
}
x.params <- optim(c(1, 1), mllk.normal, data = x)
y.params <- optim(c(1, 1), mllk.normal, data = y)
x <- rnorm(20, 2, 4)
y <- rnorm(40, 2.5, 4)
xy <- c(x, y)
mllk.normal <- function(params, data) {
-(data %>% dnorm(mean = params[1], sd = params[2], log = T) %>% sum)
}
x.params <- optim(c(1, 1), mllk.normal, data = x)
y.params <- optim(c(1, 1), mllk.normal, data = y)
full.model.l <- c(dnorm(x, mean = x.params$par[1], sd = x.params$par[2]),
dnorm(y, mean = y.params$par[1], sd = y.params$par[2])) %>% prod
full.model.l
-log(full.model.l)
x.params$value + y.params$value
runApp('MEGA/Master/STATS/week4/exercises/ex4_7')
runApp('MEGA/Master/STATS/week4/exercises/ex4_7')
exponential.optim <- optimize(mllk.exponential, interval = c(-10, 10), data = neuron$time)
# Expressions we want to minimize
mllk.gamma <- function(params, data) {
-(dgamma(data, shape = params[1], rate = params[2], log = T) %>% sum)
}
mllk.exponential <- function(rate, data) {
-(dexp(data, rate, log = T) %>% sum)
}
# Optimize and compute minus log likelihood
exponential.optim <- optimize(mllk.exponential, interval = c(-10, 10), data = neuron$time)
gamma.optim <- optim(c(1, 1), mllk.gamma, data = neuron$time)
neuron <- read.table("http://math.ku.dk/~tfb525/teaching/statbe/neuronspikes.txt",
col.names = "time")
# Expressions we want to minimize
mllk.gamma <- function(params, data) {
-(dgamma(data, shape = params[1], rate = params[2], log = T) %>% sum)
}
mllk.exponential <- function(rate, data) {
-(dexp(data, rate, log = T) %>% sum)
}
# Optimize and compute minus log likelihood
exponential.optim <- optimize(mllk.exponential, interval = c(-10, 10), data = neuron$time)
gamma.optim <- optim(c(1, 1), mllk.gamma, data = neuron$time)
library("magrittr")
# Read data
neuron <- read.table("http://math.ku.dk/~tfb525/teaching/statbe/neuronspikes.txt",
col.names = "time")
# Expressions we want to minimize
mllk.gamma <- function(params, data) {
-(dgamma(data, shape = params[1], rate = params[2], log = T) %>% sum)
}
mllk.exponential <- function(rate, data) {
-(dexp(data, rate, log = T) %>% sum)
}
# Optimize and compute minus log likelihood
exponential.optim <- optimize(mllk.exponential, interval = c(-10, 10), data = neuron$time)
gamma.optim <- optim(c(1, 1), mllk.gamma, data = neuron$time)
statistic <- 2 * (exponential.optim$objective - gamma.optim$value)
statistic
p.value <- 1 - pchisq(statistic, df = 1)
runApp('MEGA/Master/STATS/week4/exercises/ex4_7')
runApp('MEGA/Master/STATS/week4/exercises/ex4_7')
runApp('MEGA/Master/STATS/week4/exercises/ex4_7')
runApp('MEGA/Master/STATS/week4/exercises/ex4_7')
source('~/.active-rstudio-document', echo=TRUE)
setwd("MEGA/Master/STATS/week4/exercises/")
source('~/.active-rstudio-document', echo=TRUE)
lower <- -5
upper <- +7
length.out <- 1001
healthy <- curve(dnorm(x, mean = 0, sd = 1), from = lower, to = upper, n = length.out)$y
sick <- curve(dnorm(x, mean = 2, sd = 1), from = lower, to = upper, n = length.out)$y
blood.data <- data.frame(id = factor(rep(c("healthy", "sick"), each = length.out)),
X = seq(lower, upper, length.out = length.out),
p = c(healthy, sick))
tau <- 2
ggplot(data = subset(blood.data, id == "healthy"), aes(x = X, y = p, fill = "red")) +
geom_area(alpha = 0.5, position = 'identity') +
geom_line(size = 1.5, col = "red") +
guides(col = FALSE, fill = FALSE) +
scale_fill_discrete(name = "Population",
breaks = c("healthy", "sick"),
labels = c("Healthy", "Sick")) +
scale_y_continuous(name = "Density") +
scale_x_continuous(name = "X", limits = c(lower, upper), breaks = seq(lower, upper, 1))
tau <- seq(from = lower, to = upper, length.out = length.out)
alpha <- curve( {1 - pnorm(x, mean = 0, sd = 1)},
from = lower, to = upper, n = length.out)$y
beta <- curve( {pnorm(x, mean = 2, sd = 1)},
from = lower, to = upper, n = length.out,
add = T)$y
power <- 1 - beta
data <- data.frame(
τ = tau,
name = as.factor(rep(c("alpha", "beta", "power"), each = length.out)),
value = c(alpha, beta, power)
data$id <- 1:nrow(data)
base <- data %>%
ggvis(~τ, ~value, stroke = ~name, key := ~id) %>%
#layer_lines(strokeWidth := 5) %>%
layer_points(fill = ~name)
data
data <- data.frame(
τ = tau,
name = as.factor(rep(c("alpha", "beta", "power"), each = length.out)),
value = c(alpha, beta, power)
)
data$id <- 1:nrow(data)
base <- data %>%
ggvis(~τ, ~value, stroke = ~name, key := ~id) %>%
#layer_lines(strokeWidth := 5) %>%
layer_points(fill = ~name)
base
?add_legend
base <- data %>%
ggvis(~τ, ~value, stroke = ~name, key := ~id) %>%
#layer_lines(strokeWidth := 5) %>%
layer_points(fill = ~name) %>%
add_legend(properties = ) %>%
add_legend(fontSize = 20)
base <- data %>%
ggvis(~τ, ~value, stroke = ~name, key := ~id) %>%
#layer_lines(strokeWidth := 5) %>%
layer_points(fill = ~name) %>%
add_legend(fontSize = 20)
base <- data %>%
ggvis(~τ, ~value, stroke = ~name, key := ~id) %>%
layer_points(fill = ~name) %>%
add_legend(fontSize = 20)
base <- data %>%
ggvis(~τ, ~value, stroke = ~name, key := ~id) %>%
layer_points(fill = ~name) %>%
add_legend(fontSize = list(NULL, NULL, 20))
base <- data %>%
ggvis(~τ, ~value, stroke = ~name, key := ~id) %>%
layer_points(fill = ~name) %>%
add_legend(list(NULL, NULL, 20))
base
base <- data %>%
ggvis(~τ, ~value, stroke = ~name, key := ~id) %>%
layer_points(fill = ~name) %>%
add_legend(labels = list(NULL, NULL, 20))
base
base <- data %>%
ggvis(~τ, ~value, stroke = ~name, key := ~id) %>%
layer_points(fill = ~name) %>%
add_legend(labels = list(angle = 90, align = "left", fontSize = 20))
legend_props(legend = list(angle = 90, align = "left", fontSize = 20))
base <- data %>%
ggvis(~τ, ~value, stroke = ~name, key := ~id) %>%
layer_points(fill = ~name) %>%
add_legend(properties = legend_props(legend = list(angle = 90, align = "left", fontSize = 20)))
base <- data %>%
ggvis(~τ, ~value, stroke = ~name, key := ~id) %>%
layer_points(fill = ~name) %>%
add_legend(properties = legend_props(legend = list(size = 20)))
base <- data %>%
ggvis(~τ, ~value, stroke = ~name, key := ~id) %>%
layer_points(fill = ~name) %>%
add_legend(properties = legend_props(legend = list(stroke = 20)))
base
base <- data %>%
ggvis(~τ, ~value, stroke = ~name, key := ~id) %>%
layer_points(fill = ~name) %>%
add_legend(properties = legend_props(legend = list(20)))
base
legend_props(legend = list(20))
legend_props(legend = list(size = 20))
legend_props(legend = list(stroke = 20))
add_legend(properties = legend_props(legend = list(stroke = 20)))
base <- data %>%
ggvis(~τ, ~value, stroke = ~name, key := ~id) %>%
layer_points(fill = ~name) %>%
add_legend(properties = legend_props(legend = list(stroke = 20)))
base
base <- data %>%
ggvis(~τ, ~value, stroke = ~name, key := ~id) %>%
layer_points(fill = ~name)
base
base %>% add_tooltip(function(data){paste0(data$name, "<br />Value: ", round(data$value, digits = 2), "<br />Tau:", data$tau)}, "hover")
runApp('ex4_7')
x <- rnorm(20, 2, 4)
y <- rnorm(40, 2.5, 4)
xy <- c(x, y)
x.mean <- mean(x)
y.mean <- mean(y)
mllk.normal <- function(params, data) {
-(data %>% dnorm(mean = params[1], sd = params[2], log = T) %>% sum)
}
x.params <- optim(c(1, 1), mllk.normal, data = x)
x.params
full.model.x <- optim(c(1, 1), mllk.normal, data = x)
full.model.y <- optim(c(1, 1), mllk.normal, data = y)
# Nested model
nested.model <- optim(c(1, 1), mllk.normal, data = xy)
full.model.l <- full.model.x$value + full.model.y$value
full.model.l
full.model.mllk <- full.model.x$value + full.model.y$value
# Nested model
nested.model.mllk <- nested.model$value
q <- nested.model.mllk - full.model.mllk
q
statistic <- -2 * q
statistic
nested.model.mllk
full.model.mllk
statistic <- 2 * q
statistic
statistic <- 2 * q
q
statistic <- 2 * q
statistic
lrt.pval <- 1 - pchisq(statistic, df = 1)
lrt.pval
ttest.pval <- t.test(x, y,
var.equal = TRUE,
alternative = "two.sided")$p.value
ttest.pval
ggplot(data = data.frame(test = as.factor(c("Likelihood ratio", "Student's T")), p_value = c(lrt.pval, ttest.pval))) +
geom_bar(aes(x = test, y = p_value, fill = test), stat = "identity") +
scale_y_continuous(limits = 0:1)
N <- 1000
t.values <- numeric(N)
lrt.values <- numeric(N)
mllk.normal <- function(params, data) {
-(data %>% dnorm(mean = params, sd = 4, log = T) %>% sum)
}
for(i in 1:N)
{
x <- rnorm(20, 2, 4)
y <- rnorm(40, 100, 4)
x.mean <- mean(x)
y.mean <- mean(y)
xy <- c(x, y)
# Full model
full.model.x <- optim(c(1, 1), mllk.normal, data = x)
full.model.y <- optim(c(1, 1), mllk.normal, data = y)
full.model.mllk <- full.model.x$value + full.model.y$value
# Nested model
nested.model <- optim(c(1, 1), mllk.normal, data = xy)
nested.model.mllk <- nested.model$value
q <- nested.model.mllk - full.model.mllk
statistic <- 2 * q
lrt.pval <- 1 - pchisq(statistic, df = 1)
ttest.pval <- t.test(x, y,
var.equal = TRUE,
alternative = "two.sided")$p.value
t.values[i] <- ttest.pval
lrt.values[i] <- lrt.pval
}
pvalue.data <- data.frame(id = factor(rep(c("t.test", "lrt"), each = N)), value = c(t.values, lrt.values))
hist(t.values)
hist(lrt.values)
t.values
lrt.values
x <- rnorm(20, 2, 4)
y <- rnorm(40, 2.5, 4)
x.mean <- mean(x)
y.mean <- mean(y)
xy <- c(x, y)
# Full model
full.model.x <- optim(c(1, 1), mllk.normal, data = x)
full.model.y <- optim(c(1, 1), mllk.normal, data = y)
full.model.mllk <- full.model.x$value + full.model.y$value
# Nested model
nested.model <- optim(c(1, 1), mllk.normal, data = xy)
nested.model.mllk <- nested.model$value
q <- nested.model.mllk - full.model.mllk
statistic <- 2 * q
lrt.pval <- 1 - pchisq(statistic, df = 1)
ttest.pval <- t.test(x, y,
var.equal = TRUE,
alternative = "two.sided")$p.value
t.values[i] <- ttest.pval
lrt.values[i] <- lrt.pval
}
pvalue.data <- data.frame(id = factor(rep(c("t.test", "lrt"), each = N)), value = c(t.values, lrt.values))
ggplot(pvalue.data, aes(x = value, fill = id)) + geom_histogram(alpha = 0.5, position = "identity")
N <- 1000
t.values <- numeric(N)
lrt.values <- numeric(N)
mllk.normal <- function(params, data) {
-(data %>% dnorm(mean = params, sd = 4, log = T) %>% sum)
}
for(i in 1:N)
{
x <- rnorm(20, 2, 4)
y <- rnorm(40, 2.5, 4)
x.mean <- mean(x)
y.mean <- mean(y)
xy <- c(x, y)
# Full model
full.model.x <- optim(c(1, 1), mllk.normal, data = x)
full.model.y <- optim(c(1, 1), mllk.normal, data = y)
full.model.mllk <- full.model.x$value + full.model.y$value
# Nested model
nested.model <- optim(c(1, 1), mllk.normal, data = xy)
nested.model.mllk <- nested.model$value
q <- nested.model.mllk - full.model.mllk
statistic <- 2 * q
lrt.pval <- 1 - pchisq(statistic, df = 1)
ttest.pval <- t.test(x, y,
var.equal = TRUE,
alternative = "two.sided")$p.value
t.values[i] <- ttest.pval
lrt.values[i] <- lrt.pval
}
pvalue.data <- data.frame(id = factor(rep(c("t.test", "lrt"), each = N)), value = c(t.values, lrt.values))
hist(t.values)
hist(lrt.values)
N <- 1000
t.values <- numeric(N)
lrt.values <- numeric(N)
mllk.normal <- function(params, data) {
-(data %>% dnorm(mean = params[1], sd = params[2], log = T) %>% sum)
}
for(i in 1:N)
{
x <- rnorm(20, 2, 4)
y <- rnorm(40, 2.5, 4)
x.mean <- mean(x)
y.mean <- mean(y)
xy <- c(x, y)
# Full model
full.model.x <- optim(c(1, 1), mllk.normal, data = x)
full.model.y <- optim(c(1, 1), mllk.normal, data = y)
full.model.mllk <- full.model.x$value + full.model.y$value
# Nested model
nested.model <- optim(c(1, 1), mllk.normal, data = xy)
nested.model.mllk <- nested.model$value
q <- nested.model.mllk - full.model.mllk
statistic <- 2 * q
lrt.pval <- 1 - pchisq(statistic, df = 1)
ttest.pval <- t.test(x, y,
var.equal = TRUE,
alternative = "two.sided")$p.value
t.values[i] <- ttest.pval
lrt.values[i] <- lrt.pval
print(i)
# update GUI console
flush.console()
}
pvalue.data <- data.frame(id = factor(rep(c("t.test", "lrt"), each = N)), value = c(t.values, lrt.values))
pb <- tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
library("tcltk")
pb <- tcltk::tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
pb <- tcltk::tkProgressBar(title = "progress bar", min = 0,
max = M, width = 300)
pvalue.data <- data.frame(id = factor(rep(c("t.test", "lrt"), each = N)), value = c(t.values, lrt.values))
ggplot(pvalue.data, aes(x = value, fill = id)) + geom_histogram(alpha = 0.5, position = "identity")
hist(t.values)
hist(lrt.values)
N <- 1000
t.values <- numeric(N)
lrt.values <- numeric(N)
mllk.normal <- function(params, data) {
-(data %>% dnorm(mean = params[1], sd = params[2], log = T) %>% sum)
}
pb <- tcltk::tkProgressBar(title = "progress bar", min = 0,
max = M, width = 300)
for(i in 1:N)
{
x <- rnorm(20, 2, 4)
y <- rnorm(40, 2.5, 4)
x.mean <- mean(x)
y.mean <- mean(y)
xy <- c(x, y)
# Full model
full.model.x <- optim(c(1, 1), mllk.normal, data = x)
full.model.y <- optim(c(1, 1), mllk.normal, data = y)
full.model.mllk <- full.model.x$value + full.model.y$value
# Nested model
nested.model <- optim(c(1, 1), mllk.normal, data = xy)
nested.model.mllk <- nested.model$value
q <- nested.model.mllk - full.model.mllk
statistic <- 2 * q
lrt.pval <- 1 - pchisq(statistic, df = 1)
ttest.pval <- t.test(x, y,
var.equal = TRUE,
alternative = "two.sided")$p.value
t.values[i] <- ttest.pval
lrt.values[i] <- lrt.pval
setTkProgressBar(pb, i, label = paste( round(i / N * 100, 0),
"% done"))
}
pvalue.data <- data.frame(id = factor(rep(c("t.test", "lrt"), each = N)), value = c(t.values, lrt.values))
ggplot(pvalue.data, aes(x = value, fill = id)) + geom_histogram(alpha = 0.5, position = "identity")
hist(t.values)
hist(lrt.values)
pb <- tcltk::tkProgressBar(title = "progress bar", min = 0,
max = M, width = 300)
N <- 1000
t.values <- numeric(N)
lrt.values <- numeric(N)
mllk.normal <- function(params, data) {
-(data %>% dnorm(mean = params[1], sd = params[2], log = T) %>% sum)
}
pb <- tcltk::tkProgressBar(title = "progress bar", min = 0,
max = N, width = 300)
for(i in 1:N)
{
x <- rnorm(20, 2, 4)
y <- rnorm(40, 2.5, 4)
x.mean <- mean(x)
y.mean <- mean(y)
xy <- c(x, y)
# Full model
full.model.x <- optim(c(1, 1), mllk.normal, data = x)
full.model.y <- optim(c(1, 1), mllk.normal, data = y)
full.model.mllk <- full.model.x$value + full.model.y$value
# Nested model
nested.model <- optim(c(1, 1), mllk.normal, data = xy)
nested.model.mllk <- nested.model$value
q <- nested.model.mllk - full.model.mllk
statistic <- 2 * q
lrt.pval <- 1 - pchisq(statistic, df = 1)
ttest.pval <- t.test(x, y,
var.equal = TRUE,
alternative = "two.sided")$p.value
t.values[i] <- ttest.pval
lrt.values[i] <- lrt.pval
setTkProgressBar(pb, i, label = paste( round(i / N * 100, 0),
"% done"))
}
pvalue.data <- data.frame(id = factor(rep(c("t.test", "lrt"), each = N)), value = c(t.values, lrt.values))
ggplot(pvalue.data, aes(x = value, fill = id)) + geom_histogram(alpha = 0.5, position = "identity")
hist(t.values)
hist(lrt.values)
full.model.x <- optim(c(1, 1), mllk.normal, data = x)
full.model.x
full.model.y <- optim(c(1, 1), mllk.normal, data = y)
full.model.y
full.model.mllk
nested.model <- optim(c(1, 1), mllk.normal, data = xy)
nested.model
nested.model.mllk <- nested.model$value
q <- nested.model.mllk - full.model.mllk
q
statistic <- 2 * q
lrt.pval <- 1 - pchisq(statistic, df = 1)
lrt.pval
ttest.pval <- t.test(x, y,
var.equal = TRUE,
alternative = "two.sided")$p.value
ttest.pval
ggplot(data = data.frame(test = as.factor(c("Likelihood ratio", "Student's T")), p_value = c(lrt.pval, ttest.pval))) +
geom_bar(aes(x = test, y = p_value, fill = test), stat = "identity") +
scale_y_continuous(limits = 0:1)
?for
help("for")
