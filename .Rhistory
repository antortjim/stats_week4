library("ggplot2")
library("ggvis")
library("ggfortify")
alpha <- 1 - pnorm(q = 2, mean = 0, sd = 1)
beta <- 1 - pnorm(2, mean = 2, sd = 1)
little.difference <- function(set1, set2) {
difference <- abs(set1 - set2)
pos <- which.min(difference)
return(pos)
}
lower <- -5
upper <- +5
length.out <- 1001
tau <- seq(from = lower, to = upper, length.out = length.out)
alpha <- curve( {1 - pnorm(x, mean = 0, sd = 1)},
from = lower, to = upper, n = length.out)$y
beta <- curve( {pnorm(x, mean = 2, sd = 1)},
from = lower, to = upper, n = length.out)$y
power <- 1 - beta
data <- data.frame(
tau = tau,
name = as.factor(rep(c("alpha", "beta", "power"), each = length.out)),
value = c(alpha, beta, power)
)
ggplot(data = data) + geom_line(aes(x = tau, y = value, colour = name, linetype = name == "power"), size = 2) +
scale_x_continuous(name = "τ",
breaks = seq(lower, upper, 1)) +
ggtitle("α, β, and power as a function of τ") +
scale_linetype_discrete(guide = FALSE) +
scale_color_manual(name = "Parameters",
values = c("red", "green", "blue"),
breaks = c("alpha", "beta", "power"),
labels = c("α", "β", "Power")) +
scale_y_continuous(name = "P") +
theme_bw()
data$id <- 1:nrow(data)
base <- data %>%
ggvis(~tau, ~value, stroke = ~name, key := ~id) %>%
#layer_lines(strokeWidth := 5) %>%
layer_points(fill = ~name)
base %>% add_tooltip(function(data){paste0(data$name, "<br />Value: ", round(data$value, digits = 2), "<br />Tau:", data$tau)}, "hover")
neuron <- read.table("http://math.ku.dk/~tfb525/teaching/statbe/neuronspikes.txt",
col.names="isi")
data <- neuron$isi
mllk.gamma <- function(params, data) {
-(dgamma(data, shape = params[1], rate = params[2]) %>% log %>% sum)
}
mllk.exponential <- function(rate, data) {
-(dexp(data, rate) %>% log %>% sum)
}
exp.optim <- optimize(mllk.exponential, interval = c(-10, 10), data = data)
exp.optim <- exp.optim$minimum
gamma.optim <- optim(c(1, 1), mllk.gamma, data = data)
optim.shape <- gamma.optim$par[1]
optim.rate <- gamma.optim$par[2]
MLL1 <- mllk.exponential(exp.optim, data)
MLL2 <- mllk.gamma(gamma.optim$par, data)
statistic <- 2 * (MLL1 - MLL2)
1 - pchisq(statistic, df = 1)
neuron <- read.table("http://math.ku.dk/~tfb525/teaching/statbe/neuronspikes.txt",
col.names="isi")
data <- neuron$isi
mllk.gamma <- function(params, data) {
-(dgamma(data, shape = params[1], rate = params[2]) %>% log %>% sum)
}
mllk.exponential <- function(rate, data) {
-(dexp(data, rate) %>% log %>% sum)
}
exp.optim <- optimize(mllk.exponential, interval = c(-10, 10), data = data)
exp.optim <- exp.optim$minimum
gamma.optim <- optim(c(1, 1), mllk.gamma, data = data)
optim.shape <- gamma.optim$par[1]
optim.rate <- gamma.optim$par[2]
MLL1 <- mllk.exponential(exp.optim, data)
MLL2 <- mllk.gamma(gamma.optim$par, data)
statistic <- 2 * (MLL1 - MLL2)
1 - pchisq(statistic, df = 1)
neuron <- read.table("http://math.ku.dk/~tfb525/teaching/statbe/neuronspikes.txt",
col.names="isi")
data <- neuron$isi
mllk.gamma <- function(params, data) {
-(dgamma(data, shape = params[1], rate = params[2]) %>% log %>% sum)
}
mllk.exponential <- function(rate, data) {
-(dexp(data, rate) %>% log %>% sum)
}
exp.optim <- optimize(mllk.exponential, interval = c(-10, 10), data = data)
exp.optim <- exp.optim$minimum
gamma.optim <- optim(c(1, 1), mllk.gamma, data = data)
optim.shape <- gamma.optim$par[1]
optim.rate <- gamma.optim$par[2]
MLL1 <- mllk.exponential(exp.optim, data)
MLL2 <- mllk.gamma(gamma.optim$par, data)
statistic <- 2 * (MLL1 - MLL2)
1 - pchisq(statistic, df = 1)
neuron <- read.table("http://math.ku.dk/~tfb525/teaching/statbe/neuronspikes.txt",
col.names="isi")
data <- neuron$isi
mllk.gamma <- function(params, data) {
-(dgamma(data, shape = params[1], rate = params[2]) %>% log %>% sum)
}
mllk.exponential <- function(rate, data) {
-(dexp(data, rate) %>% log %>% sum)
}
exp.optim <- optimize(mllk.exponential, interval = c(-10, 10), data = data)
exp.optim <- exp.optim$minimum
gamma.optim <- optim(c(1, 1), mllk.gamma, data = data)
optim.shape <- gamma.optim$par[1]
optim.rate <- gamma.optim$par[2]
MLL1 <- mllk.exponential(exp.optim, data)
MLL2 <- mllk.gamma(gamma.optim$par, data)
statistic <- 2 * (MLL1 - MLL2)
1 - pchisq(statistic, df = 1)
neuron <- read.table("http://math.ku.dk/~tfb525/teaching/statbe/neuronspikes.txt",
col.names="isi")
data <- neuron$isi
mllk.gamma <- function(params, data) {
-(dgamma(data, shape = params[1], rate = params[2]) %>% log %>% sum)
}
mllk.exponential <- function(rate, data) {
-(dexp(data, rate) %>% log %>% sum)
}
exp.optim <- optimize(mllk.exponential, interval = c(-10, 10), data = data)
exp.optim <- exp.optim$minimum
gamma.optim <- optim(c(1, 1), mllk.gamma, data = data)
optim.shape <- gamma.optim$par[1]
optim.rate <- gamma.optim$par[2]
MLL1 <- mllk.exponential(exp.optim, data)
MLL2 <- mllk.gamma(gamma.optim$par, data)
statistic <- 2 * (MLL1 - MLL2)
1 - pchisq(statistic, df = 1)
print(source('~/MEGA/Master/STATS/week3/ex3.R')$value)
inv.gaussian(params = best.params, data = 0.2)
hist(neuron$isi, prob = TRUE, breaks = 30, main = "Optimal fit to inverse gaussian")
lines(density(neuron$isi), col = "blue")
curve(inv.gaussian(params = best.params, data = x),
add = T, from = 0, to = 10, col = "red")
legend(4, 1.2, legend = c("Density", "Inverse gaussian"), c("blue", "red"))
par(mfrow = c(1, 1))
hist(neuron$isi, prob = TRUE, breaks = 30, main = "Optimal fit to inverse gaussian")
lines(density(neuron$isi), col = "blue")
curve(inv.gaussian(params = best.params, data = x),
add = T, from = 0, to = 10, col = "red")
legend(4, 1.2, legend = c("Density", "Inverse gaussian"), c("blue", "red"))
data <- read.table("http://www.math.ku.dk/~tfb525/teaching/statbe/Ceriodaphnia.txt",
header=TRUE)
plot(x = data$concentration, y = data$organisms, pch = 1, col = "red")
plot(x = data$concentration, y = log(data$organisms), pch = 1, col = "red")
estimate.alpha.beta(X = data$organisms, Y = data$concentration)
library(ggplot2)
ggplot(data = data, aes(x = concentration, y = organisms)) + geom_point() + geom_smooth()
ggplot(data = data, aes(x = concentration, y = log(organisms))) + geom_point() + geom_smooth()
## Shiny App
library("shiny")
ui <- fluidPage(
#generate a slider input
#store the number under num
sliderInput(inputId = "lambda",
label = "Choose lambda",
value = max.lambda, min = 0.01, max = 3),
sliderInput(inputId = "shape",
label = "Choose shape",
value = max.shape, min = 0.01, max = 3),
sliderInput(inputId = "rate",
label = "Choose rate",
value = max.rate, min = 0.01, max = 3),
#leave a display space and plot the hist object
plotOutput("hist")
)
server <- function(input, output) {
#generate the hist object
output$hist <- renderPlot({
hist(neuron$isi, prob = TRUE, breaks = 30)
curve(dexp(x, input$lambda), add = T, from = 0, to = 10, col = "red")
curve(dgamma(x, input$shape, input$rate), add = T, from = 0, to = 10, col = "blue")
lines(density(neuron$isi), col = "green")
legend(4, 1.2, legend = c("Exponential", "Gamma", "Density"), c("red", "blue", "green"))
})
}
shinyApp(ui = ui, server = server)
source('~/MEGA/Master/STATS/week4/exercises/ex4_7.R')
print(source('ex4_7.R')$value)
print(source('ex4_7.R')$value)
